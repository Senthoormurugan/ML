import matplotlib.pyplot as plt
import math  
def plots(cluster1_x1,cluster1_x2,cluster2_x1,cluster2_x2):
    plt.figure()
    plt.plot(cluster1_x1,cluster1_x2,'.')
    plt.plot(cluster2_x1,cluster2_x2,'*')
    plt.grid(True)
    plt.show()
def round1(c1_x1,c1_x2,c2_x1,c2_x2):
    cluster1_x1 = []
    cluster1_x2 = []
    cluster2_x1 = []
    cluster2_x2 = []
    for i,j in zip(x1,x2):
    	a = math.sqrt(((i-c1_x1)**2 + (j-c1_x2)**2))
    	b = math.sqrt(((i-c2_x1)**2 + (j-c2_x2)**2))
    	if a < b:
    		cluster1_x1.append(i)
    		cluster1_x2.append(j)
    	else: 
    		cluster2_x1.append(i)
    		cluster2_x2.append(j)
    plots(cluster1_x1,cluster1_x2,cluster2_x1,cluster2_x2)
    c1_x1 = sum(cluster1_x1)/len(cluster1_x1)
    c1_x2 = sum(cluster1_x2)/len(cluster1_x2)
    c2_x1 = sum(cluster2_x1)/len(cluster2_x1)
    c2_x2 = sum(cluster2_x2)/len(cluster2_x2)
    round2 (c1_x1,c1_x2,c2_x1,c2_x2)
    def round2(c1_x1,c1_x2,c2_x1,c2_x2):    
    cluster1_x1 = []
    cluster1_x2 = []
    cluster2_x1 = []
    cluster2_x2 = []
    
    for i,j in zip(x1,x2):
    	c = math.sqrt(((i-c1_x1)**2 + (j-c1_x2)**2))
    	d = math.sqrt(((i-c2_x1)**2 + (j-c2_x2)**2))
    	if c < d:
    		cluster1_x1.append(i)
    		cluster1_x2.append(j)
    	else: 
    		cluster2_x1.append(i)
    		cluster2_x2.append(j)
    
    plots(cluster1_x1,cluster1_x2,cluster2_x1,cluster2_x2)

x1 = [15, 19, 15, 5, 13, 17, 15, 12, 8, 6, 9, 13]
x2 = [13, 16, 17, 6, 17, 14, 15, 13, 7, 6, 10, 12]

plots(x1,x2,[],[])
round1(x1[4],x2[4],x1[10],x2[10])




#PCA





import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split 
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
df = pd.read_csv('/content/flowers.csv')
X = df[list(df.columns)[:-1]]
y = df['Flower']
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0)  
pca = PCA(n_components=2)
x = StandardScaler().fit_transform(X_train)
new_x = pd.DataFrame(data = pca.fit_transform(x), columns = ['x1', 'x2'])
df2 = pd.concat([new_x, df[['Flower']]], axis = 1)
fig = plt.figure(figsize = (8,8))
ax = fig.add_subplot(1,1,1) 
ax.set_xlabel('x1', fontsize = 15)
ax.set_ylabel('x2', fontsize = 15)
ax.set_title('2 Components', fontsize = 20)
for i, j in zip(['Rose', 'Jasmin', 'Lotus'],['g', 'b', 'r']):
    ax.scatter(df2.loc[df2['Flower'] == i, 'x1'], df2.loc[df2['Flower'] == i, 'x2'], c = j)
ax.legend(['Rose', 'Jasmin', 'Lotus'])
ax.grid()
plt.show()
print (pca.explained_variance_ratio_)
print (df.columns)
print (df2.columns)
